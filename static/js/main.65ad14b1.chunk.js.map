{"version":3,"sources":["components/spinner.gif","components/TodoItem.js","firebase.js","components/Todos.js","components/Header.js","components/AddTodo.js","pages/About.js","serviceWorker.js","index.js","App.js"],"names":["module","exports","__webpack_require__","p","TodoItem","_ref","todo","toggleComplete","delTodo","title","completed","id","react_default","a","createElement","className","style","textDecoration","backgroundColor","color","margin","getStyle","type","checked","onChange","e","target","onClick","padding","float","firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","Spinner","align","src","spinner","alt","width","Todos","_useState","useState","_useState2","Object","slicedToArray","todos","setState","useEffect","database","ref","on","snapshot","val","newTodos","_todos$todo","push","Fragment","length","map","key","Todos_Spinner","Header","react_router_dom","to","AddTodo","addTodo","setTitle","onSubmit","preventDefault","display","placeholder","name","flex","value","About","Boolean","window","location","hostname","match","ReactDOM","render","basename","setTodos","todoRef","concat","once","item","set","remove","toConsumableArray","react_router","exact","path","props","component","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.65ad14b1.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/spinner.5e02af51.gif\";","import React from 'react';\n\nexport default ({ todo, toggleComplete, delTodo }) => {\n\n\tconst getStyle = () => {\n\t\tconst { completed } = todo;\n\t\treturn {\n\t\t\ttextDecoration: completed ? \"line-through\" : \"none\",\n\t\t\tbackgroundColor: completed ? \"grey\" : \"#f9f9f9\",\n\t\t\tcolor: completed ? \"white\" : \"black\",\n\t\t\tmargin: \"1em\"\n\t\t}\n\t}\n\n\tconst { title, completed, id } = todo;\n\treturn (\n\t\t<div className=\"card\" style={getStyle()}>\n\t\t\t<div className=\"card-body\">\n\t\t\t\t{ completed ?\n\t\t\t\t\t<input type=\"checkbox\" checked onChange={(e) => toggleComplete({id, checked: e.target.checked})}/>\n\t\t\t\t\t\t:\n\t\t\t\t\t<input type=\"checkbox\" onChange={(e) => toggleComplete({id, checked: e.target.checked})}/>\n\t\t\t\t}\n\n\t\t\t\t\t{title}\n\t\t\t\t\t<button\n\t\t\t\t\t\tclassName=\"btn btn-danger\"\n\t\t\t\t\t\tonClick={() => delTodo(id)}\n\t\t\t\t\t\tstyle={{ padding: \"5px 10px\", float: \"right\" }}>\n\t\t\t\t\t\tX\n\t\t\t\t\t</button>\n\t\t\t</div>\n\t\t</div>\n\t)\n}\n","import firebase from 'firebase';\n\n// Your web app's Firebase configuration\nvar config = {\n\tapiKey: \"AIzaSyAsoXrvDr5NadexSKY3D6ROy8NZT7qYLz4\",\n\tauthDomain: \"react-todolist-ef4a3.firebaseapp.com\",\n\tdatabaseURL: \"https://react-todolist-ef4a3.firebaseio.com\",\n\tprojectId: \"react-todolist-ef4a3\",\n\tstorageBucket: \"\",\n\tmessagingSenderId: \"210814641030\",\n\tappId: \"1:210814641030:web:2e4ae8d6b0d42f9c\"\n};\n// Initialize Firebase\nfirebase.initializeApp(config);\n\nexport default firebase;\n","import React, { useState, useEffect } from 'react';\nimport TodoItem from './TodoItem';\nimport spinner from './spinner.gif';\nimport firebase from '../firebase';\n\nconst Spinner = () => (\n\t<div style={{margin: \"auto\", align:\"center\"}}>\n\t\t<img src={spinner} alt=\"\" width=\"200px\" />\n\t</div>\n)\n\nexport default ({ toggleComplete, delTodo }) => {\n\tconst [todos, setState] = useState([]);\n\n\tuseEffect(() => {\n\t\tconst todosRef = firebase.database().ref(\"todos\");\n\t\ttodosRef.on(\"value\", (snapshot) => {\n\t\t\tlet todos = snapshot.val();\n\t\t\tlet newTodos = [];\n\t\t\tfor (let todo in todos) {\n\t\t\t\tconst { title, completed } = todos[todo];\n\t\t\t\tnewTodos.push({ id: todo, title, completed });\n\t\t\t}\n\t\t\tsetState(newTodos);\n\t\t});\n\t}, []);\n\n\treturn (\n\t\t<React.Fragment>\n\t\t\t{todos.length ? todos.map(todo => (\n\t\t\t\t<TodoItem\n\t\t\t\t\tkey={todo.id}\n\t\t\t\t\ttodo={todo}\n\t\t\t\t\ttoggleComplete={toggleComplete}\n\t\t\t\t\tdelTodo={delTodo}\n\t\t\t\t/>\n\t\t\t)) : <Spinner />}\n\t\t</React.Fragment>\n\t)\n}\n","import React from 'react';\nimport { Link } from 'react-router-dom';\n\nexport default () => {\n\treturn (\n\t\t<header>\n\t\t\t<h1>TodoList</h1>\n\t\t\t<div className=\"head-text\">\n\t\t\t\t<Link className=\"head-link\" to=\"/\">Home</Link>\n\t\t\t\t<span>|</span>\n\t\t\t\t<Link className=\"head-link\" to=\"/about\">About</Link>\n\t\t\t</div>\n\t\t\t\t<br />\n\t\t\t\t{\" \"}\n\t\t</header>\n\t);\n}\n","import React, { useState } from 'react';\n\nexport default ({ addTodo }) => {\n\tconst [title, setTitle] = useState(\"\");\n\n\tconst onSubmit = (e) => {\n\t\te.preventDefault();\n\t\tif(title.length > 0) {\n\t\t\taddTodo(title);\n\t\t\tsetTitle(\"\");\n\t\t}\n\t}\n\n\tconst onChange = (e) => setTitle(e.target.value)\n\n\treturn (\n\t\t<form onSubmit={onSubmit} className=\"m-3\" style={{display: \"flex\"}}>\n\t\t\t<input\n\t\t\t\ttype=\"text\"\n\t\t\t\tplaceholder=\"Add Todo Item\"\n\t\t\t\tname=\"title\"\n\t\t\t\tstyle={{flex: \"8\", padding: \"5px\"}}\n\t\t\t\tvalue={title}\n\t\t\t\tonChange={onChange}\n\t\t\t/>\n\t\t\t<input\n\t\t\t\ttype=\"submit\"\n\t\t\t\tvalue=\"Submit\"\n\t\t\t\tclassName=\"btn btn-success ml-3\"\n\t\t\t\tstyle={{flex: \"1\"}}\n\t\t\t/>\n\t\t</form>\n\t);\n}\n","import React from 'react';\n\nexport default () => {\n\treturn (\n\t\t<React.Fragment>\n\t\t\t<h1>About</h1>\n\t\t\t<p>\n\t\t\t\tThis is the TodoList app version 1.0.0. It is part of a React Crash Course.\n\t\t\t</p>\n\t\t</React.Fragment>\n\t);\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'react-mdl/extra/material.css';\nimport 'react-mdl/extra/material.js';\nimport { BrowserRouter as Router } from 'react-router-dom';\n\nReactDOM.render(\n\t<Router basename=\"/todos\">\n\t\t<App />\n\t</Router>\n\t,\n\tdocument.getElementById('root')\n);\n\nserviceWorker.unregister();\n","import React, { useState, useEffect } from 'react';\nimport { Route } from 'react-router-dom';\nimport Todos from './components/Todos';\nimport Header from './components/Header';\nimport AddTodo from './components/AddTodo';\nimport About from './pages/About';\nimport firebase from './firebase';\nimport './App.css';\n\nexport default () => {\n\tconst [todos, setTodos] = useState([]);\n\n\t// Toggle `this.complete` for TodoItem\n\tconst toggleComplete = ({ id, checked }) => {\n\t\tconst todoRef = firebase.database().ref(`todos/${id}`);\n\t\ttodoRef.once(\"value\", snapshot => {\n\t\t\tlet item = snapshot.val();\n\t\t\titem.completed = checked;\n\t\t\ttodoRef.set(item);\n\t\t});\n\t}\n\n\t// Delete TodoItem\n\tconst delTodo = (id) => {\n\t\tconst todoRef = firebase.database().ref(`todos/${id}`);\n\t\ttodoRef.remove();\n\t}\n\n\t// Add TodoItem\n\tconst addTodo = (title) => {\n\t\tconst todoRef = firebase.database().ref(\"todos\");\n\t\tconst todo = { title, completed: false };\n\t\ttodoRef.push(todo);\n\t\tsetTodos([...todos, todo]);\n\t}\n\n\treturn (\n\t\t<React.Fragment>\n\t\t\t<Header />\n\t\t\t<div className=\"container\">\n\t\t\t\t<Route exact path=\"/\" render={props => (\n\t\t\t\t\t<React.Fragment>\n\t\t\t\t\t\t\t<AddTodo addTodo={addTodo} />\n\t\t\t\t\t\t\t<Todos\n\t\t\t\t\t\t\t\ttoggleComplete={toggleComplete}\n\t\t\t\t\t\t\t\tdelTodo={delTodo}\n\t\t\t\t\t\t\t/>\n\t\t\t\t\t</React.Fragment>\n\t\t\t\t)} />\n\t\t\t\t<Route path=\"/about\" component={About} />\n\t\t\t</div>\n\t\t</React.Fragment>\n\t);\n}\n"],"sourceRoot":""}